Бот для ВК, ищет посты, которые лайкали твои друзья, переписывается от имени группы. Токен группы и ее id в настройках.
Это демонстрационное задание для конкурса на вакансию.
Запускать через main :)

План.
1. Что не реализовано т.к. для демонстрации это не имело смысла:
2. Комментарий по поводу выбора структуры проекта
3. Вкратце, как это все работает.
4. Комментарий по поводу того, что нужно реализовать, чтобы этого бота можно было использовать "в полевых условиях".
    (Разумеется, в зависимости от предполагаемой нагрузки)

1. Что не реализовано т.к. для демонстрации это не имело смысла
!Не тестировал бота с одновременным использованием нескольких аккаунтов одновременни,
 но алгоритм подразумевает то, что это работает
!я не реализовывал никакой интерфейс для пользователя с серверной стороны
!прога ищет только первые 100 постов на стене
!прога получает только часть лайков поста(сколько точно не помню)
!я не сильно заморачивался по поводу regexp, что в каких-то случаях может непринципиально нарушать опыт работы

2. Комментарий по поводу выбора структуры проекта

    Бот довольно простой и, неверное, не было необходимости реализовывать его в настолько усложненном модульном виде.
Но поскольку это лишь тестовое задание, я все таки решил его воплотить это так, поскольку это  отчасти отображает
мое видение того, как нужно реализовывать более сложные задачи. Вкратце, выбранная структура является удобной основой
для будущих модификаций и расширения в силу обособленности и относительной независимости логики, относящейся к
конкретным событиям.
    Я бы не сказал, что десь представлен лучший экземпляр mvc модели, но тем не менее, все довольно интуитивно-понятно.
   - Процесс управления всеми модулями происходит в файле main: авторизация, подключени модулей, обработка событий
   - В файле settings представлены все константы, чтобы их удобно было изменять
   - Сценарий диалога с ботом, как и текстовое представление ответов, как и шаблоны регулярных выражений находится в
   файле scenario_view.json. Представление шагов диалога в подобном обособленном виде, является интуитивно-понятным и
   удобным для расширения.
   - В то же время, обработчики всех этапов диалога находятся в файле scenario_funcs, чтобы можно было удобно изменить
   логику относящуюся к конкретному событию.
   - Модуль data_processing отвечает за хранение статуса пользователей, с которыми ведется диалог(на чем остановились,
   время сессии, чтобы по надобности ее можно было закрыть). Для примера была реализована только временная кэш память,
   но в функцию уборки мусора remove_obsolete_users можно удобно добавить возможность сохранять данные о пользователях
   в БД, чтобы не начинать диалог сначала после перезагрузки.

3. Вкратце, как это все работает.

    1) В main инициализируются все модули.
    2) Используется long poll для получения событий Использовалось расширение vk_api
    3) Параллельно запускается поток, для очищения кэша и вечени счета времени юзеров онлайн.
    4) Если событие соответствует новому сообщению, по надобности либо:
        - Создается новый пользователь, к которому привязывается шаг "приветствие"
        - Либо исполняется функция, которая соответствует текущему шагу пользователя(в т.ч. получить имя, получить дату,
        найти посты)
       И в результате либо переводит статус пользователя на новый шаг, либо вследствие ошибки ввода оставляет его на
       месте.
    5) Процесс повторяется.

4. Комментарий по поводу того, что нужно реализовать, чтобы этого бота можно было использовать "в полевых условиях".
   (Разумеется, в зависимости от предполагаемой нагрузки). Да и вообще, что нужно бы доработать.
    1) Использование пулов комманд api вк для их исполнения через execute и реализация полноценного поиска по стене
    2) Использование мультипроцессинга или связки nginx + uwsgi для параллельной обработки событий и повышения произво-
    дительности.
    3) Использование vk_api в отдельном процессе, для возможности создания нескольких сессий: например это будет нужно,
    если надо будет иметь права админа и возможность писать от имени группы одновременно
    4) Непаханное поле рефакторинга. Переименовывать, переоформлять :)
    5) Сохранение информации о пользователях в БД(любую реляционную) для того, чтобы не приветствовать снова тех, кто
    уже пользовался ботом
    6) Местами можно заменить медленные алгоритмы поиска, перебора на более быстрые с делением списков пополам.
    7) Информацию о сессиях пользователей, если понадобится более гибкий поиск их по параментрам стоит представить в
    виде хеш таблицы.
    8) Поставить проверку качества связи и подстраховку от дропов

    Ну и т.д. и т.п.